{
  "version": 3,
  "file": "index.js",
  "sourceRoot": "../src/",
  "sources": [
    "index.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "'use strict'\r\n\r\nmodule.exports = (->\r\n  evalInContext = (str, context) ->\r\n    (new Function(\"with(this) {return #{str}}\"))\r\n    .call context\r\n  validationFns =\r\n    $or: ->\r\n      myargs = arguments\r\n      new Promise (resolve) ->\r\n        result = false\r\n        for arg in myargs\r\n          result = result or (await arg)\r\n        resolve result\r\n    $number: (min, max) ->\r\n      if typeof @.$item is 'number'\r\n        result = true\r\n        if typeof min is 'number'\r\n          result = result and (min <= @.$item)\r\n        if typeof max is 'number'\r\n          result = result and (max >= @.$item)\r\n        return result\r\n      return false\r\n    $string: (min, max) ->\r\n      if typeof @.$item is 'string'\r\n        result = true\r\n        if typeof min is 'number'\r\n          result = result and (min <= @.$item.length)\r\n        if typeof max is 'number'\r\n          result = result and (max >= @.$item.length)\r\n        return result\r\n      return false\r\n    $min: (min) ->\r\n      min <= @.$item\r\n    $max: (max) ->\r\n      max >= @.$item\r\n    $notEmpty: ->\r\n      @.$item.length\r\n    $empty: ->\r\n      @.$item.length is 0\r\n    $exists: ->\r\n      @.$item or @.$item is 0 or @.$item is false\r\n    $email: ->\r\n      /^[a-z0-9\\-_\\.]+@[a-z0-9\\-_]+(\\.[a-z0-9\\-_]+)+$/i.test @.$item\r\n    $emailList: ->\r\n      allGood = true\r\n      if @.$item\r\n        emails = @.$item.split /[;,\\s]+/g\r\n        for email in emails\r\n          if email\r\n            allGood = allGood && /^[a-z0-9\\-_\\.]+@[a-z0-9\\-_]+(\\.[a-z0-9\\-_]+)+$/i.test email\r\n      return allGood\r\n  validations = {}\r\n  validate = (validations, obj, root) ->\r\n    validationType = Object.prototype.toString.call(validations)\r\n    if validations and validationType isnt '[object Array]' and validationType isnt '[object String]' and validationType isnt '[object Function]'\r\n      for key of validations\r\n        if key.indexOf('$') is 0\r\n          continue\r\n        if myvalidations = validations[key]?.$validations or validations[key]\r\n          validationFns.$item = obj[key]\r\n          if typeof myvalidations is 'string' or typeof myvalidations is 'function'\r\n            myvalidations = [myvalidations]\r\n          for validation in myvalidations\r\n            if typeof validation is 'function'\r\n              if not await validation.call(validationFns)\r\n                return \r\n                  result: false\r\n                  validation: validation\r\n                  obj: obj\r\n                  root: root\r\n                  key: key\r\n                  value: obj[key]\r\n            else\r\n              if not await evalInContext validation, validationFns\r\n                return \r\n                  result: false\r\n                  validation: validation\r\n                  obj: obj\r\n                  root: root\r\n                  key: key\r\n                  value: obj[key]\r\n        type = Object.prototype.toString.call obj[key]\r\n        if validations[key]\r\n          if type is '[object Object]'\r\n            if Object.keys(validations[key]).length is 1 and validations[key].$validations\r\n              return result: true\r\n            if not (failedValidation = await validate validations[key], obj[key], root).result\r\n              return failedValidation\r\n          else if type is '[object Array]'\r\n            if Object.keys(validations[key]).length is 1 and validations[key].$validations\r\n              return result: true\r\n            for myobj in obj[key]\r\n              if not (failedValidation = await validate validations[key], myobj, root).result\r\n                return failedValidation\r\n    result: true\r\n  setValidations: (_validations) ->\r\n    validations = _validations\r\n    doExpand = (validation) ->\r\n      if typeof validation is 'string'\r\n        validation.replace /(\\$\\w+)(?!\\()[^\\w]|^\\s*(\\$\\w+)\\s*$/g, (a, b, c) ->\r\n          (b or c) + '()' + (if b then a.substr(a.length - 1) else '')\r\n      else\r\n        validation\r\n    expandFns = (obj) ->\r\n      for key, validation of obj\r\n        type = Object.prototype.toString.call validation\r\n        switch type\r\n          when '[object String]'\r\n            validation = doExpand validation\r\n          when '[object Array]'\r\n            for vitem, i in validation\r\n              validation[i] = doExpand vitem\r\n          when '[object Object]'\r\n            expandFns validation\r\n    expandFns validations\r\n  addValidationFns: (fnsObj) ->\r\n    for key, fn of fnsObj\r\n      if typeof fn is 'function'\r\n        validationFns[key] = fn\r\n  validate: (table, obj) ->\r\n    return await validate validations[table], obj, obj\r\n)()"
  ]
}